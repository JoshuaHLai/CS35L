To start out this lab, I had to create a new directory specifically for
the Git materials.  To do so, I used the command "mkdir gitroot" which was
given to us by the TA.  Next, I changed directories into "gitroot" using
"cd gitroot" and used the command "git init" to create a new Git
repository.  In order to copy the Diffutils repository in Git format,
I used the following command:
"git clone ~eggert/src/gnu/diffutils"

Using "ls" I saw that a new directory "diffutils" was created.  Once I
changed directories (cd) into it, I ran the command "git log > git-log.txt"
which gave me a log of all the changes to the repository and stored it into
a text file.  Next, I used the command "git tag > git-tags.txt" to store a
list of tags such as "v2.7, v3.3, etc."

To find the commit entitled "maint: quote 'like this' ...", I opened up
git-log.txt with the command "emacs git-log.txt" and used the keystrokes
"C-s m a i n t : q" which brought me to the commit labelled as
"commit 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f" where I will need to 
grab the patch. To create the acutal patch, I used the following command:
"git format-patch -1 --stdout 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f >
 quote-patch.txt"

Afterwards, I checked out the version 3.0 Diffutils by using the command
"git checkout v3.0" which moved the HEAD to that branch.

Before applying the patch, I used the following command:
"patch -p1 < quote-patch.txt"
which asked me for specific files to patch.  In response, I followed the spec
and typed in "RETURN" which asked me to skip patches.  The following is
a list of the errors that showed up when conducting the patch:

patching file README
Hunk #1 FAILED at 9.
Hunk #3 FAILED at 60.
2 out of 3 hunks FAILED -- saving rejects to file README.rej
patching file README-hacking
Hunk #1 FAILED at 19.
1 out of 1 hunk FAILED -- saving rejects to file README-hacking.rej

patching file cfg.mk
Hunk #1 FAILED at 29.
1 out of 1 hunk FAILED -- saving rejects to file cfg.mk.rej

patching file src/diff.c
Hunk #10 FAILED at 876.
Hunk #11 FAILED at 906.
Hunk #12 FAILED at 942.

patching file src/diff3.c
Hunk #6 FAILED at 433.

Using the command "git status" I was provided a list of the files that were
modified by git but are not updated. I was also provided a list of "untracked
files" that had extensions of ".orig" and ".rej" which were generated by the
patch; these files have not been added to the commit.

After going through the documentation for "vc-diff" (C-x v =) and
"vc-revert" (C-x v u), I saw these commands are used to compare patched files
with the original files.  Once I entered the "vc-diff" buffer, I used the keys
"C-h m" to look at all of the options and commands I could use in the buffer.
After also looking at online documentation, I learned that "diff-apply-hunk"
(C-c C-a) will apply the specified hunk to a target file and
"diff-goto-source" (C-c C-c) will go to the source file and line 
corresponding to the specified hunk. In order to learn in depth of how to use
these commands, I looked for the files that did not have the ".c" extension.
Then, I used the following commands:
          emacs (filename)
          C-x v = (enter the "vc-diff" buffer)
          C-x v u (according to buffer, "Discard changes in 1 files?")
          yes
          C-x C-c (exit emacs)
These commands then reverted the changes in the files affected which included
NEWS, README, TODO, doc/diagmeet.note, ms/config.bat, ms/config.site, po/en.po,
src/diff.h, src/system.h, and tests/help-version.

To fix the ".c" files, I needed to go in by hand and correct the errors.  To
make it easier to find the corrections, I used the following command:
"diff (filename).c (filename).c.orig" which listed the lines with the
differences.  The files that needed to be changed by hand were the following:
cmp.c, context.c, diff.c,  diff3.c, dir.c, sdiff.c, util.c

Next, I looked into the src/diff.c.rej and src/diff3.c.rej files and copied
the rejected patches into their respective ".c" files.  To remove the
untracked files, I used the command "git clean -f" which removed the untracked
files when I use the command "git status" and showed the following files:
src/analyze.c, src/diff.c, src/diff3.c, src/ifdef.c, src/io.c, src/side.c

Following this, I ran the command "git diff > quote-3.0-patch.txt" which
outputs the patch to the text file.  After reading README-hacking, I learned
how to build Diffutils:
    ./bootstrap
    ./configure
    make
    make check

The initial output of "make check" showed that there were a few errors with
the "recursive" file, but after looking on Piazza, I elected to ignore them
and continue with the lab.

To make sure that the patch was applied correctly, I used the commands
"diff . -" and "diff --help" to see the output, where I saw that the changes
were applied.  After changing out of my "diffutils" directory (cd ..), I used
the following commands to do what the spec required:
      mkdir diffutils-3.0
      mkdir diffutils-3.0-patch
      cp -r diffutils diffutils-3.0
      cp -r diffutils diffutils-3.0-patch
Once I checkouted the correct version, I used the command provided:
"diffutils/src/diff -pru diffutils-3.0 diffutils-3.0-patch >
 quote-3.0-test.txt"

After running the command, I used the next command to see the difference
between the two files:
"diff quote-3.0-test.txt ~/Assignment_4/gitroot/diffutils/quote-3.0-patch.txt"

Looking at the output, I could clearly see that the files were not
identical and thus, they are not innocuous.
